<?xml version="1.0" encoding="utf-8"?><!-- Converted by db4-upgrade version 1.0 --><refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glBufferData"><db:info xmlns:db="http://docbook.org/ns/docbook"><copyright>
                <year>2005</year>
                <holder>Sams Publishing</holder>
            </copyright></db:info>
    <refmeta>
        
        <refentrytitle>glBufferData</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glBufferData</refname>
        <refpurpose>creates and initializes a buffer object's data store</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <funcsynopsis>
            <funcprototype>
                <funcdef>void <function>glBufferData</function></funcdef>
                <paramdef>GLenum <parameter>target</parameter></paramdef>
                <paramdef>GLsizeiptr <parameter>size</parameter></paramdef>
                <paramdef>const GLvoid * <parameter>data</parameter></paramdef>
                <paramdef>GLenum <parameter>usage</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <!-- eqn: ignoring delim $$ -->
    <refsection><info><title>Parameters</title></info>
        <variablelist>
        <varlistentry>
            <term><parameter>target</parameter></term>
            <listitem>
                <para>
                    Specifies the target buffer object.
                    The symbolic constant must be <constant>GL_ARRAY_BUFFER</constant>,
                    <constant>GL_COPY_READ_BUFFER</constant>,
                    <constant>GL_COPY_WRITE_BUFFER</constant>,
                    <constant>GL_ELEMENT_ARRAY_BUFFER</constant>,
                    <constant>GL_PIXEL_PACK_BUFFER</constant>,
                    <constant>GL_PIXEL_UNPACK_BUFFER</constant>,
                    <constant>GL_TEXTURE_BUFFER</constant>,
                    <constant>GL_TRANSFORM_FEEDBACK_BUFFER</constant>, or
                    <constant>GL_UNIFORM_BUFFER</constant>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>size</parameter></term>
            <listitem>
                <para>
                    Specifies the size in bytes of the buffer object's new data store.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>data</parameter></term>
            <listitem>
                <para>
                    Specifies a pointer to data that will be copied into the data store for initialization,
                    or <constant>NULL</constant> if no data is to be copied.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>usage</parameter></term>
            <listitem>
                <para>
                    Specifies the expected usage pattern of the data store. The symbolic constant must be
                    <constant>GL_STREAM_DRAW</constant>, <constant>GL_STREAM_READ</constant>, <constant>GL_STREAM_COPY</constant>, 
                    <constant>GL_STATIC_DRAW</constant>, <constant>GL_STATIC_READ</constant>, <constant>GL_STATIC_COPY</constant>, 
                    <constant>GL_DYNAMIC_DRAW</constant>, <constant>GL_DYNAMIC_READ</constant>, or <constant>GL_DYNAMIC_COPY</constant>.
                </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsection>
    <refsection><info><title>Description</title></info>
        <para>
            <function>glBufferData</function> creates a new data store for the buffer object currently bound to
            <parameter>target</parameter>. Any pre-existing data store is deleted. The new data store is created with the
            specified <parameter>size</parameter> in bytes and <parameter>usage</parameter>. If <parameter>data</parameter>
            is not <constant>NULL</constant>, the data store is initialized with data from this pointer. In its initial 
            state, the new data store is not mapped, it has a <constant>NULL</constant> mapped pointer, and its mapped access 
            is <constant>GL_READ_WRITE</constant>.
        </para>
        <para>
            <parameter>usage</parameter> is a hint to the GL implementation as to how a buffer object's data store will be 
            accessed. This enables the GL implementation to make more intelligent decisions that may significantly 
            impact buffer object performance. It does not, however, constrain the actual usage of the data store.
            <parameter>usage</parameter> can be broken down into two parts: first, the frequency of access (modification 
            and usage), and second, the nature of that access. The frequency of access may be one of these:
        </para>
        <variablelist>
            <varlistentry>
                <term>STREAM</term>
                <listitem>
                    <para>
                        The data store contents will be modified once and used at most a few times.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>STATIC</term>
                <listitem>
                    <para>
                        The data store contents will be modified once and used many times.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DYNAMIC</term>
                <listitem>
                    <para>
                        The data store contents will be modified repeatedly and used many times.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            The nature of access may be one of these:
        </para>
        <variablelist>
            <varlistentry>
                <term>DRAW</term>
                <listitem>
                    <para>
                        The data store contents are modified by the application, and used as the source for GL drawing and
                        image specification commands.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>READ</term>
                <listitem>
                    <para>
                        The data store contents are modified by reading data from the GL, and used to return that data 
                        when queried by the application.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>COPY</term>
                <listitem>
                    <para>
                        The data store contents are modified by reading data from the GL, and used as the source for GL
                        drawing and image specification commands.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection><info><title>Notes</title></info>
        <para>
            If <parameter>data</parameter> is <constant>NULL</constant>, a data store of the specified size is still created,
            but its contents remain uninitialized and thus undefined.
        </para>
        <para>
            Clients must align data elements consistent with the requirements of the client
            platform, with an additional base-level requirement that an offset within a buffer to
            a datum comprising <inlineequation><mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink"><mml:mi mathvariant="italic">N</mml:mi> bytes be a 
            multiple of <mml:mi mathvariant="italic">N</mml:mi></mml:math></inlineequation>.
        </para>
    </refsection>
    <refsection><info><title>Errors</title></info>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>target</parameter> is not 
            one of the accepted buffer targets.
        </para>
        <para>
            <constant>GL_INVALID_ENUM</constant> is generated if <parameter>usage</parameter> is not 
            <constant>GL_STREAM_DRAW</constant>, <constant>GL_STREAM_READ</constant>, <constant>GL_STREAM_COPY</constant>, 
            <constant>GL_STATIC_DRAW</constant>, <constant>GL_STATIC_READ</constant>, <constant>GL_STATIC_COPY</constant>, 
            <constant>GL_DYNAMIC_DRAW</constant>, <constant>GL_DYNAMIC_READ</constant>, or <constant>GL_DYNAMIC_COPY</constant>.
        </para>
        <para>
            <constant>GL_INVALID_VALUE</constant> is generated if <parameter>size</parameter> is negative.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if the reserved buffer object name 0 is bound to <parameter>target</parameter>.
        </para>
        <para>
            <constant>GL_OUT_OF_MEMORY</constant> is generated if the GL is unable to create a data store with the specified <parameter>size</parameter>.
        </para>
    </refsection>
    <refsection><info><title>Associated Gets</title></info>
        <para>
            <citerefentry><refentrytitle>glGetBufferSubData</refentrytitle></citerefentry>
        </para>
        <para>
            <citerefentry><refentrytitle>glGetBufferParameter</refentrytitle></citerefentry> with argument <constant>GL_BUFFER_SIZE</constant> or <constant>GL_BUFFER_USAGE</constant>
        </para>
    </refsection>
    <refsection><info><title>See Also</title></info>
        <para>
            <citerefentry><refentrytitle>glBindBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glBufferSubData</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glMapBuffer</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glUnmapBuffer</refentrytitle></citerefentry>
        </para>
    </refsection>
    <refsection><info><title>Copyright</title></info>
        <para>
            Copyright <trademark class="copyright"/> 2005 Addison-Wesley. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opencontent.org/openpub/">http://opencontent.org/openpub/</link>.
        </para>
    </refsection>
</refentry>