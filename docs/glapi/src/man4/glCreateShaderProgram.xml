<!-- Converted by db4-upgrade version 1.0 -->
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="glCreateShaderProgram">
    <refmeta>
        <refmetainfo>
            <copyright>
                <year>2010</year>
                <holder>Khronos Group</holder>
            </copyright>
        </refmetainfo>
        <refentrytitle>glCreateShaderProgram</refentrytitle>
        <manvolnum>3G</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>glCreateShaderProgramv</refname>
        <refpurpose>create a stand-alone program from an array of null-terminated source code strings</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <funcsynopsis>
            <funcprototype>
                <funcdef>GLuint <function>glCreateShaderProgramv</function></funcdef>
                <paramdef>GLenum <parameter>type</parameter></paramdef>
                <paramdef>GLsizei <parameter>count</parameter></paramdef>
                <paramdef>const char **<parameter>strings</parameter></paramdef>
            </funcprototype>
        </funcsynopsis>
    </refsynopsisdiv>
    <refsection xml:id="parameters"><info><title>Parameters</title></info>
        <variablelist>
        <varlistentry>
            <term><parameter>type</parameter></term>
            <listitem>
            <para>
                Specifies the type of shader to create.
            </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>count</parameter></term>
            <listitem>
            <para>
                Specifies the number of source code strings in the array <parameter>strings</parameter>.
            </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><parameter>strings</parameter></term>
            <listitem>
            <para>
                Specifies the address of an array of pointers to source code strings from which to create the program object.
            </para>
            </listitem>
        </varlistentry>
        </variablelist>
    </refsection>
    <refsection xml:id="description"><info><title>Description</title></info>
        <para>
            <function>glCreateShaderProgram</function> creates a program object containing compiled and linked
            shaders for a single stage specified by <parameter>type</parameter>. <parameter>strings</parameter>
            refers to an array of <parameter>count</parameter> strings from which to create the shader executables.
       </para>
       <para>
            <function>glCreateShaderProgram</function> is equivalent (assuming no errors are generated) to:
       </para>
<programlisting>    const GLuint shader = glCreateShader(type);
    if (shader) {
        glShaderSource(shader, count, strings, NULL);
        glCompileShader(shader);
        const GLuint program = glCreateProgram();
        if (program) {
            GLint compiled = GL_FALSE;
            glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;compiled);
            glProgramParameteri(program, GL_PROGRAM_SEPARABLE, GL_TRUE);
            if (compiled) {
                glAttachShader(program, shader);
                glLinkProgram(program);
                glDetachShader(program, shader);
            }
            /* append-shader-info-log-to-program-info-log */
        }
        glDeleteShader(shader);
        return program;
    } else {
        return 0;
    }</programlisting>
    <para>
        The program object created by <function>glCreateShaderProgram</function> has its <constant>GL_PROGRAM_SEPARABLE</constant>
        status set to <constant>GL_TRUE</constant>.
    </para>
    </refsection>
    <refsection xml:id="errors"><info><title>Errors</title></info>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <parameter>pipeline</parameter> is not
            a name previously returned from a call to <citerefentry><refentrytitle>glGenProgramPipelines</refentrytitle></citerefentry>
            or if such a name has been deleted by a call to
            <citerefentry><refentrytitle>glDeleteProgramPipelines</refentrytitle></citerefentry>.
        </para>
        <para>
            <constant>GL_INVALID_OPERATION</constant> is generated if <parameter>program</parameter> refers
            to a program object that has not been successfully linked.
        </para>
    </refsection>
    <refsection xml:id="seealso"><info><title>See Also</title></info>
        <para>
            <citerefentry><refentrytitle>glCreateShader</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCreateProgram</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glCompileShader</refentrytitle></citerefentry>,
            <citerefentry><refentrytitle>glLinkProgram</refentrytitle></citerefentry>
        </para>
    </refsection>
    <refsection xml:id="Copyright"><info><title>Copyright</title></info>
        <para>
            Copyright <trademark class="copyright"/> 2010 Khronos Group. 
            This material may be distributed subject to the terms and conditions set forth in 
            the Open Publication License, v 1.0, 8 June 1999.
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opencontent.org/openpub/">http://opencontent.org/openpub/</link>.
        </para>
    </refsection>
</refentry>