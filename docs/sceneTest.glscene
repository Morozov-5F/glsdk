//Delimiters:
//<>: Resource and node names. These will be converted to IdStrings.
//"": Filenames, or string names that are construed as filenames.
//'': Strings that will be stored and used in the graph.
//[]: GLSL identifier.
//{}: "Enumerators". Things that a specific parameter takes, which are selected from a specific list.
//(): lists of numbers, for things like vectors.

resources
	texture_res <ship_diffuse_tex> "diffuse_ship.dds"
	texture_res <ship_reflect_tex> placeholder
	sampler_res <trilinear-clamp>
		mag[linear]
		min[linear-mip-linear]
	end
	sampler_res <aniso-repeat>
		compare[less]
		mag[linear]
		min[linear-mip-linear]
		aniso 8
		wrap_s[repeat]
		wrap_t[repeat]
		wrap_r[repeat]
	end
	mesh_res <ship_mesh> [octahedron] //Generate from enumerator.
	program_res <shader>
		vert "transform.vert"
		frag "diffuse_reflect.frag"
		mtc {modelToCamera}
		nmtc {normalModelToCamera}
		sampler {diffuse_tex} 0
		uniform_buffer {projection_matrix} 0
		uniform_buffer {lights} 2
	end
	program_res <shader>
		vert "transform.vert"
		frag "diffuse_reflect.frag"
		mtc {modelToCamera}
		nmtc {normalModelToCamera}
		sampler {diffuse_tex} 0
		sampler {reflect_tex} 4
		uniform_buffer {projection_matrix} 0
		uniform_buffer {lights} 2
	end
	uniform_buffer_res <projection_matrix>
		binding 0
		size 64
		offset 0
		usage[stream-draw]
	end
	uniform_buffer_res <lights>
		binding 2
		size 128
		placeholder
	end
	uniform_res <num_lights> [float] 5
	uniform_res <test_value> [vec3] (2.43 3.4 9.8)
	camera_res <main>
		//Stuff
	end
end

scene
	//Defines all layers
	layers 'main' 'shadow1' 'shadow2'

	node <globals>
		layer inherit 'main'	//Layer for the current node. All children will inherit these.
		layer 'shadow1'			//Layer for the current node. Children will not inherit.

		local <matrices>
			uniform_buffer <projection_matrix>
			uniform_buffer <lights>
		end
		
		node <ship>
			layer 'shadow1' -'main'	//Adds 'shadow1' layer and removes the inherited 'main' layer.
			
			node_tm
				quaternion (0 0.707 0 0.707)
				translation (0 5 0)
			end
			obj_tm
				scale (2)
			end
			
			local <common>
				mesh <ship_mesh> 'variantName'
				texture 0 <ship_diffuse_tex> <aniso-repeat>
			end

			variant <test>
				using <matrices> <common>

				program <reflect_shader>
					uniform <num_lights>
				end

				texture 4 <ship_reflect_tex> <trilinear-clamp>
			end

		end
	end
end