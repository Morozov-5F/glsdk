/**
\defgroup module_glscene GL Scene Graph

This is a relatively simple scene graph system, designed around the needs of a shader-based rendering system.

If you do not know what a "scene graph" is, [here is your answer](@ref page_glscene_scene_graph). That describes the basic concepts of a scene graph; this system implements a specific form of scene graph.

### Object semantics ###

Objects in the Scene Graph system come in three general varieties, and each has different semantics.

The glscene::SceneGraph object itself has value semantics, but is non-copyable. It is [swappable](http://en.cppreference.com/w/cpp/concept/Swappable) however.

All objects that end in `Ref` have reference semantics. This means that they refer to information stored in another object (the glscene::SceneGraph or one of its constituents). Copying them does not copy the data being referenced. Treat them like a pointer. And, like a pointer, if you cause the destruction of an object being referenced, you must stop using *any* `Ref` instance that refers to it.

All other objects have full value semantics. They are copyable and so forth. These are mostly used to provide information to create some object within the SceneGraph (hence the `Info` name).

The Scene Graph system also uses some incomplete types by reference or pointer. For example, the glscene::NodeData class cannot be directly instantiated by the user. The user can only get a reference or pointer to an existing one, and there are a number of non-member functions used to modify them or query data from them.

Do not forget that C++ features argument-dependent lookup. This allows you to call these ::glscene-namespaced scoped functions as if they were in the global namespace; you don't have to qualify them with `glscene`.
**/


/**
\defgroup module_glscene_core Core Scene Facilities
\ingroup module_glscene

This scene graph system is "simple" in that it doesn't handle concepts like light management and the like directly. But it is powerful in several ways.

First, it has a system for managing most of the kinds of OpenGL resources that the scene uses. Meshes (either with glmesh::Mesh or user-specified rendering code), textures, and so forth are all stored in the scene graph's resource list. Therefore, when you delete the scene graph object, all of the owned resources will be deleted as well.

The resource system also allows you to have uniform values (not in buffers) which are shared among multiple programs. When the values of these uniforms are changed, the changes will be propogated across all nodes that use those uniforms for programs.

Second, it provides direct support for a variety of newer OpenGL features. These include:

- [Tessellation Shaders](http://www.opengl.org/wiki/Tessellation)
- [Separate programs and program pipelines](http://www.opengl.org/wiki/Shader_Compilation#Separate_programs)
- [Uniform buffers](http://www.opengl.org/wiki/Uniform_Buffer_Object)
- [Shader storage buffers](http://www.opengl.org/wiki/Shader_Storage_Buffer_Object)
- [Image Load/Store](http://www.opengl.org/wiki/Image_Load_Store)

Most scene graphs do not handle these advanced features.

\note While the scene graph API provides access to these features, *you* must verify that these features are available before actually using them. The API will *not* check to see if, for example, image load/store is available if you tell it to bind an image. If a node uses an image, then the graph assumes you're *serious* about that and that image load/store will be available. If it is not available, then badness will occur.

Third, the scene graph system has multiple levels of rendering customization. Nodes in this graph contain the data to be rendered. However, the data that a node gets rendered with depends on two things: the layer and the style.

Nodes can be part of a layer. A node can be part of multiple layers. When you render the scene, you render a specific layer. If the node is not part of the layer being rendered, then it will not be rendered.

Nodes have one or more styles. Styles contain the meshes, shaders, and other parameters needed to render. When you render the scene, you render with a specific style. If a particular node does not have a style that matches the one you requested, then it will not be rendered.

Conceptually, "layer" specifies *what* you want to render; "style" specifies *how* you want to render it.

Note that the above applies only to *rendering*. The transformations up and down the node hierarchy remain the same no matter what layer or style is being used. So a node that doesn't get rendered will still affect its child nodes.

When the scene is rendered, the nodes can be rendered either in an arbitrarr order or sorted back-to-front (coarsely by position, relative to the camera).  The latter mechanism allows for blending. Using styles, a non-blended style can be rendered in the default order, then a blended style can be used in the back-to-front order. Between these rendering calls, blending would be turned on. The meshes and shaders used in the blended style could be different from those in the non-blended one.

The scene graph does not cover framebuffer state, blending state, viewport state, or the like. The scene graph only handles the program, texture, image, uniform and storage buffer bindings.

**/


/**
\defgroup module_glscene_node Scene Graph Node
\ingroup module_glscene

Nodes in this scene graph system represent the location of an object, or group of objects, within the scene. Nodes are created and owned by the SceneGraph; as such, the functions to create and destroy NodeData objects are part of the SceneGraph object.

Nodes exist in a hierarchy, so SceneGraph::CreateChildNode requires a specific parent node. The root node, the eventual parent of all nodes, is automatically created by the SceneGraph and cannot be destroyed or have its parent changed.

When nodes are created, they may be given a name. Once they have a name, that name cannot be changed. The name must also be unique among all nodes. This later allows the user to query the node by name from the SceneGraph.

The StyleInfo object represents the information needed to define a style within a node. This object, and its associated component objects, are simple value types. The [function to define a style on the object](\ref glscene::SceneGraph::DefineNodeStyle) is part of the SceneGraph, as the graph must validate the provided information against the resources in the graph.

# Transforms: Node vs Object #  {#module_glscene_node_transforms}

Nodes in the graph have two separate transformation matrices: the node transform and the object transform.

The node transforms for a node are propogated up the hierarchy of nodes within a scene. The object transforms *are not*; the transform only applies to the mesh(es) being rendered by styles within this node. The object transform is applied before any parent node transforms. So it is right-multiplied onto the list of transforms.

So, for a node with 2 parent nodes, the full model-to-camera matrix for rendering styles on a node looks like this:

    model_to_camera = camera * root_node_tm * direct_parent_node_tm * current_node_tm * current_node_object_tm

The purpose of this distinction is to allow transformations, such as scaling, that should not be applied to child nodes. This allows one to re-position or re-scale a mesh without accidentally modifying child nodes. It's easier to do it this way than to create a separate child node for the mesh.

Each transform on a NodeData is represented by a TransformData object.
**/


/**
\defgroup module_glscene_resources Scene Graph Resources
\ingroup module_glscene

The SceneGraph class maintains a list of resources. When a node is rendered, it references these resources to get its textures, samplers, and so forth.

The SceneGraph provides access to its internal resources via the ResourceRef class, obtained with the SceneGraph::GetResources function. The ResourceRef class uses reference semantics, so copies will all refer back to the same resources in the SceneGraph instance.

All resources are named. The various different types of resources all have different namespaces. Therefore, it is perfectly valid to use the same name for a texture resource as a program resource. Note that resource names use [identifier strings](\ref page_glscene_identifier_strings).

The ResourceRef class maintains the following resources:

- [Textures](http://www.opengl.org/wiki/Texture) (which can be used for samplers or [images](http://www.opengl.org/wiki/Image_Load_Store).)
- [Sampler Objects](http://www.opengl.org/wiki/Sampler_Object). Most of their state is defined via the SamplerInfo object.
- Programs, which have already been properly linked.
- Drawable Meshes, either via the glmesh::Mesh class or a user-provided class derived from glscene::Drawable.
- [Uniform](http://www.opengl.org/wiki/Uniform_Buffer_Object) and [Shader Storage buffer objects](http://www.opengl.org/wiki/Shader_Storage_Buffer_Object). These not only store the buffer but also the place it is bound to and the range. It effectively stores the data for a [glBindBufferRange](http://www.opengl.org/wiki/GLAPI/glBindBufferRange) call.
- [Uniforms](http://www.opengl.org/wiki/Uniform_%28GLSL%29), which can be referenced by any program. The uniform stored in the ResourceRef object therefore can be shared among a number of different programs. Changing it in one place changes it in all places.
- Cameras, via the glutil::ViewPole class.

The ResourceRef class can be told to take ownership over any of the OpenGL objects it is given (as well as meshes). By claiming ownership, the ResourceRef class (and therefore the SceneGraph that owns them) will destroy these objects when it is destroyed.

Certain data stored by sampler objects can be modified in-situ, as can the value of particular uniforms.

Program objects are complex resources. This is in part because of the nature of the SceneGraph system. The graph will compute the transform for the object from model space to camera space; that is part of the graph's job during rendering. However, getting that data to a shader is less simple, due to the fact that users can name variables however they wish.

To avoid forcing users to name their matrices a certain way, programs that contain vertex shaders can specify certain uniforms that represent matrices. There are three matrices that can be specified:

- Model to Camera matrix: This is must be of the GLSL type `mat4`.
- Model to Camera matrix for normals: This must be of the GLSL type `mat3`.
- Camera to Model matrix for normals: This must be of the GLSL type `mat3`. This can be useful for transforming the light direction into model-space, so that it can be transformed into tangent-space.

Also, it is often convenient to establish a convention for the meaning of various context resources. For example, you could say that texture unit 0 is always the diffuse texture. So, rather than having to change the program's uniform state every time you want use a texture, you just set the program to use a known unit. At render-time, you bind the texture to that texture unit. 

All of this information is provided through the ProgramInfo object.
**/


/**
\defgroup module_glscene_exceptions Scene Graph Exceptions
\ingroup module_glscene

\brief Exceptions thrown by the [GL Scene Graph](@ref module_glscene) classes and functions.

stuff
**/

/**
\page page_glscene_identifier_strings Identifier Strings

For the sake of efficiency, many names that the user provides are not internally stored as `std::string` objects. Instead, they are stored as a fixed-length hashed identifier string for faster lookup and less memory allocation overhead. Strings longer than the fixed-length are truncated from the middle.

You can tell which strings will be converted to these identifiers quite easily. Any parameter that ends in `Id` will be stored as an indentifier string.

Due to the truncation to a fixed length, it is theoretically possible to get a collision of string names in this system, where two different strings that you give the system actually map to the same name. This requires that the following to be true of *both* strings:

- They are longer than the fixed-length (27 characters currently).
- The truncated version of the strings resolves to the same character sequence. Note that the truncation happens in the *middle*.
- The full length strings happen to generate the same hashes.
- The names are used for the same lookup (for [resource names](\ref module_glscene_resources), the two strings would both be refering to textures or both to uniforms, etc.).

*All of these* must happen to have a name collision.

In practice, all of these are highly unlikely to happen. I have professionally seen the [djb2 hashing algorithm](http://www.cse.yorku.ca/~oz/hash.html) used in a purely hash-driven system. Even using a database of *tens* of thousands of strings (where we routinely scanned for hash collisions as an off-line process) we only got a collision *once*. And that was with a system were we stored *just* the hashes, not 27 other characters from the string.

However, if this does concern you (and it shouldn't), you can ensure that there will be no problems by using identifier strings that are 27 characters or less. And 27 characters is plenty of room for an identifier string.
**/

/**
\page page_glscene_scene_graph What is a Scene Graph?

This explains the general concept of a scene graph. The [GL Scene Graph][4] system implements a particular form of scene graph.

A [scene graph][1] is a data structrue that stores and maintains the relative position and orientation of numerous objects in a scene. There are many variations in terms of the implementation of this concept, but the basic concept is as follows.

A scene graph is first and foremost a *[graph][2]*; a series of nodes that are connected to one another in some way. For scenes, the graph is typically ordered into a [tree][3]. A tree is a special restricted form of graph. Specifically, nodes in a tree are hierarchially arranged: all nodes but one are connected to a single parent node and zero or more child nodes. The node without a parent is the root node, and all other nodes in the tree directly or indirectly are the child of the root.

In a scene graph, a node represents a transform, as well as one or more things that 
could be rendered with that transform. Because nodes in the graph are inherited, the 
transforms are *also* inherited. Each node's transform is relative to its parent node in the hierarchy.

This is a very powerful concept in rendering. This allows objects to move relative to one another. For example, consider a world with a train in it. The world is fixed, but the train itself moves around. You can put objects into the train, and they can have their own movements. Because these objects are children of the train node, they will automatically move relative to the train. When the train node moves around, so does its children. If the train turns, the objects in the train will turn with it.

Specific implementations have different restrictions and ideas about scene graphs. Some graphs dictate that all nodes with children cannot have visible objects, that a visible object must be a childless node.

The [GL Scene Graph][4] system does not impose this restriction; objects are part of the contents of a node. The "contents" generally consist of some form of mesh coupled with information about how to render it (shaders, parameters for those shaders, textures, etc). Each node in scene graphs usually represents only a single mesh.

Some scene graph systems add an additional grouping classification to nodes: layers. A scene graph has some number of layers, and individual nodes belong to one or more layers (or no layers at all). When rendering the scene graph, the user specifies a layer to render. The contents of a node are rendered only if it is part of the layer being rendered.

Layers often act separately from the node hierarchy. A child node does not *have* to inherit the layers of its parents. So you can render a layer that does not include some middle node, but that layer can still include any child nodes.


[1]: http://en.wikipedia.org/wiki/Scene_graph
[2]: http://en.wikipedia.org/wiki/Graph_%28data_structure%29
[3]: http://en.wikipedia.org/wiki/Tree_%28data_structure%29
[4]: @ref module_glscene
**/
